import logging
import asyncio
import json
import os
import datetime
from collections import defaultdict, Counter
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.error import TimedOut, RetryAfter, NetworkError

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
DATA_DIR = r"C:\Users\VybornovOA1\Desktop\py\bot_topic"  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
CONFIG_FILE = os.path.join(DATA_DIR, "bot_config.json")
STATS_FILE = os.path.join(DATA_DIR, "user_stats.json")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
BOT_TOKEN = ""
MAIN_NAME = "–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞"
THEMES = ["–î–æ—Å–∫–∞", "–ö–ª–∞—Å—Å", "–ù–æ–≤–æ—Å—Ç–∏", "–ö–æ–º–∞–Ω–¥–∞ 1", "–ö–æ–º–∞–Ω–¥–∞2"]
HELLO_MESSAGES = [
    "–≠—Ç–æ —Ç–µ–º–∞ 1",
    "–≠—Ç–æ —Ç–µ–º–∞ 2", 
    "–≠—Ç–æ —Ç–µ–º–∞ 3",
    "–≠—Ç–æ —Ç–µ–º–∞ 4",
    "–≠—Ç–æ —Ç–µ–º–∞ 5"
]
TEMPLATE_MESSAGES = [
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É!",
    "üìå –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã:\n1. –£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞\n2. –ù–µ —Å–ø–∞–º—å—Ç–µ\n3. –ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ—Å—å —Ç–µ–º—ã –≥—Ä—É–ø–ø—ã",
    "üí° –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –≤ —á–∞—Ç–µ!"
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_STATS = defaultdict(lambda: defaultdict(Counter))

def ensure_data_directory():
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: {DATA_DIR}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    ensure_data_directory()
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {
        "bot_token": "",
        "main_name": MAIN_NAME,
        "themes": THEMES,
        "hello_messages": HELLO_MESSAGES,
        "template_messages": TEMPLATE_MESSAGES
    }

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def save_config(config):
    ensure_data_directory()
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(config, f, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_user_stats():
    global USER_STATS
    ensure_data_directory()
    if os.path.exists(STATS_FILE):
        try:
            with open(STATS_FILE, "r", encoding="utf-8") as f:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç defaultdict(lambda: defaultdict(Counter))
                data = json.load(f)
                for chat_id, chat_data in data.items():
                    for user_id, user_data in chat_data.items():
                        for content_type, count in user_data.items():
                            USER_STATS[chat_id][user_id][content_type] = count
            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {STATS_FILE}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            USER_STATS = defaultdict(lambda: defaultdict(Counter))
    else:
        logger.info(f"–§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {STATS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        USER_STATS = defaultdict(lambda: defaultdict(Counter))

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_user_stats():
    try:
        ensure_data_directory()
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º defaultdict –≤ –æ–±—ã—á–Ω—ã–π dict –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        data = {}
        for chat_id, chat_data in USER_STATS.items():
            data[chat_id] = {}
            for user_id, user_data in chat_data.items():
                data[chat_id][user_id] = dict(user_data)
        
        with open(STATS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {STATS_FILE}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def init_config():
    global BOT_TOKEN, MAIN_NAME, THEMES, HELLO_MESSAGES, TEMPLATE_MESSAGES
    
    config = load_config()
    BOT_TOKEN = config.get("bot_token", "")
    MAIN_NAME = config.get("main_name", MAIN_NAME)
    THEMES = config.get("themes", THEMES)
    HELLO_MESSAGES = config.get("hello_messages", HELLO_MESSAGES)
    TEMPLATE_MESSAGES = config.get("template_messages", TEMPLATE_MESSAGES)
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–µ–º
    sync_hello_messages()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    load_user_stats()
    
    return config

def sync_hello_messages():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–µ–º."""
    global HELLO_MESSAGES, THEMES
    
    # –ï—Å–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–Ω—å—à–µ, —á–µ–º —Ç–µ–º - –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
    while len(HELLO_MESSAGES) < len(THEMES):
        HELLO_MESSAGES.append(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–º—É {len(HELLO_MESSAGES) + 1}")
    
    # –ï—Å–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª—å—à–µ, —á–µ–º —Ç–µ–º - –æ–±—Ä–µ–∑–∞–µ–º
    if len(HELLO_MESSAGES) > len(THEMES):
        HELLO_MESSAGES = HELLO_MESSAGES[:len(THEMES)]

def save_themes_config():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ–º."""
    config = load_config()
    config["themes"] = THEMES
    config["hello_messages"] = HELLO_MESSAGES
    save_config(config)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–∞—Ö
async def safe_api_call(func, max_retries=3, delay=2, *args, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–∞—Ö."""
    retries = 0
    while retries < max_retries:
        try:
            return await func(*args, **kwargs)
        except (TimedOut, NetworkError) as e:
            retries += 1
            if retries >= max_retries:
                raise
            logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {retries}/{max_retries} —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
            await asyncio.sleep(delay)
        except RetryAfter as e:
            retry_after = e.retry_after
            logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–Ω–∏–µ {retry_after} —Å–µ–∫...")
            await asyncio.sleep(retry_after)
            retries += 1

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_stats(chat_id, user_id, content_type):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    chat_id_str = str(chat_id)
    user_id_str = str(user_id)
    USER_STATS[chat_id_str][user_id_str][content_type] += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
    total_updates = sum(USER_STATS[chat_id_str][user_id_str].values())
    if total_updates % 1 == 0:
        save_user_stats()

# ==================== –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–ï–ú–ê–ú–ò ====================

async def add_theme_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ç–µ–º—É –≤ —Å–ø–∏—Å–æ–∫."""
    global THEMES, HELLO_MESSAGES
    
    if not context.args:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: /add –ù–æ–≤–∞—è —Ç–µ–º–∞\n"
            "–ò–ª–∏ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n"
            "/add –ù–æ–≤–∞—è —Ç–µ–º–∞ | –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é —Ç–µ–º—É!"
        )
        return
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    full_text = " ".join(context.args)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if " | " in full_text:
        theme_name, hello_message = full_text.split(" | ", 1)
        theme_name = theme_name.strip()
        hello_message = hello_message.strip()
    else:
        theme_name = full_text.strip()
        hello_message = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–º—É '{theme_name}'"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Ç–µ–º–∞
    if theme_name in THEMES:
        await update.message.reply_text(f"‚ö†Ô∏è –¢–µ–º–∞ '{theme_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
    THEMES.append(theme_name)
    HELLO_MESSAGES.append(hello_message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    save_themes_config()
    
    await update.message.reply_text(
        f"‚úÖ –¢–µ–º–∞ '{theme_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
        f"üìù –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {hello_message}\n"
        f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º: {len(THEMES)}"
    )

async def delete_theme_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞."""
    global THEMES, HELLO_MESSAGES
    
    if not context.args:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/delete 3 - —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É ‚Ññ3\n"
            "/delete –î–æ—Å–∫–∞ - —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É '–î–æ—Å–∫–∞'\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_themes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ç–µ–º"
        )
        return
    
    query = " ".join(context.args)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ - –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if query.isdigit():
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É
        index = int(query) - 1
        if 0 <= index < len(THEMES):
            removed_theme = THEMES.pop(index)
            removed_message = HELLO_MESSAGES.pop(index) if index < len(HELLO_MESSAGES) else "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            save_themes_config()
            
            await update.message.reply_text(
                f"‚úÖ –¢–µ–º–∞ #{query} '{removed_theme}' —É–¥–∞–ª–µ–Ω–∞!\n"
                f"üìä –û—Å—Ç–∞–ª–æ—Å—å —Ç–µ–º: {len(THEMES)}"
            )
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–º—ã. –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: 1-{len(THEMES)}")
    else:
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if query in THEMES:
            index = THEMES.index(query)
            THEMES.remove(query)
            if index < len(HELLO_MESSAGES):
                removed_message = HELLO_MESSAGES.pop(index)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            save_themes_config()
            
            await update.message.reply_text(
                f"‚úÖ –¢–µ–º–∞ '{query}' —É–¥–∞–ª–µ–Ω–∞!\n"
                f"üìä –û—Å—Ç–∞–ª–æ—Å—å —Ç–µ–º: {len(THEMES)}"
            )
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –¢–µ–º–∞ '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

async def list_themes_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–º."""
    if not THEMES:
        await update.message.reply_text("üìù –°–ø–∏—Å–æ–∫ —Ç–µ–º –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º.")
        return
    
    message = f"üìã –°–ø–∏—Å–æ–∫ —Ç–µ–º ({len(THEMES)}):\n\n"
    
    for i, theme in enumerate(THEMES, 1):
        hello_msg = HELLO_MESSAGES[i-1] if i-1 < len(HELLO_MESSAGES) else "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
        message += f"{i}. {theme}\n"
        message += f"   üí¨ {hello_msg}\n\n"
    
    message += "–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
    message += "/add [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É\n"
    message += "/delete [–Ω–æ–º–µ—Ä/–Ω–∞–∑–≤–∞–Ω–∏–µ] - —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É\n"
    message += "/edit_theme [–Ω–æ–º–µ—Ä] [–Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ] - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
    message += "/edit_hello [–Ω–æ–º–µ—Ä] [–Ω–æ–≤–æ–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ] - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
    
    await update.message.reply_text(message)

async def edit_theme_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã."""
    global THEMES
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–º—ã –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n"
            "–ü—Ä–∏–º–µ—Ä: /edit_theme 2 –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
        )
        return
    
    try:
        index = int(context.args[0]) - 1
        new_name = " ".join(context.args[1:])
        
        if 0 <= index < len(THEMES):
            old_name = THEMES[index]
            THEMES[index] = new_name
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            save_themes_config()
            
            await update.message.reply_text(
                f"‚úÖ –¢–µ–º–∞ #{index+1} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞:\n"
                f"–ë—ã–ª–æ: '{old_name}'\n"
                f"–°—Ç–∞–ª–æ: '{new_name}'"
            )
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–º—ã. –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: 1-{len(THEMES)}")
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–º—ã.")

async def edit_hello_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–º—ã."""
    global HELLO_MESSAGES
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–º—ã –∏ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
            "–ü—Ä–∏–º–µ—Ä: /edit_hello 2 –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç–µ–º—É!"
        )
        return
    
    try:
        index = int(context.args[0]) - 1
        new_message = " ".join(context.args[1:])
        
        if 0 <= index < len(THEMES):
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            while len(HELLO_MESSAGES) <= index:
                HELLO_MESSAGES.append(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–º—É {len(HELLO_MESSAGES) + 1}")
            
            old_message = HELLO_MESSAGES[index]
            HELLO_MESSAGES[index] = new_message
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            save_themes_config()
            
            await update.message.reply_text(
                f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–º—ã '{THEMES[index]}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n"
                f"–ë—ã–ª–æ: {old_message}\n"
                f"–°—Ç–∞–ª–æ: {new_message}"
            )
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–º—ã. –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: 1-{len(THEMES)}")
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–º—ã.")

# ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è Telegram —Ñ–æ—Ä—É–º–æ–≤.\n"
        "‚Ä¢ –°–æ–∑–¥–∞—é —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä—É–º–∞—Ö\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—é —Ç–µ–º–∞–º–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help."""
    await update.message.reply_text(
        "üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n"
        "üéØ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/create - –°–æ–∑–¥–∞—Ç—å —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞\n"
        "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        "üìù –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ï–ú–ê–ú–ò:\n"
        "/list_themes - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ–º—ã\n"
        "/add [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É\n"
        "/delete [–Ω–æ–º–µ—Ä/–Ω–∞–∑–≤–∞–Ω–∏–µ] - –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É\n"
        "/edit_theme [–Ω–æ–º–µ—Ä] [–Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ] - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã\n"
        "/edit_hello [–Ω–æ–º–µ—Ä] [–Ω–æ–≤–æ–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ] - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n\n"
        "üí° –ü–†–ò–ú–ï–†–´:\n"
        "/add –û–±—Å—É–∂–¥–µ–Ω–∏—è | –ó–¥–µ—Å—å –º—ã –æ–±—Å—É–∂–¥–∞–µ–º –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "/delete 3\n"
        "/edit_theme 1 –ì–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"
    )

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    if not context.args:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard = [
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞", callback_data="settings_token")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Ç–µ–º—ã", callback_data="settings_main_name")],
            [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏", callback_data="settings_themes")],
            [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏", callback_data="settings_hello")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
            f"‚Ä¢ –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {'–Ω–∞—Å—Ç—Ä–æ–µ–Ω' if BOT_TOKEN else '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
            f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Ç–µ–º—ã: {MAIN_NAME}\n"
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º: {len(THEMES)}\n"
            f"‚Ä¢ –®–∞–±–ª–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(TEMPLATE_MESSAGES)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/settings set [–ø–∞—Ä–∞–º–µ—Ç—Ä] [–∑–Ω–∞—á–µ–Ω–∏–µ]\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/settings set bot_token YOUR_TOKEN_HERE\n"
            "/settings set main_name –ù–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Ç–µ–º—ã"
        )
        
        await update.message.reply_text(message, reply_markup=reply_markup)
    elif len(context.args) >= 3 and context.args[0] == "set":
        param = context.args[1]
        value = " ".join(context.args[2:])
        
        await update_setting(update, param, value)
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/settings set [–ø–∞—Ä–∞–º–µ—Ç—Ä] [–∑–Ω–∞—á–µ–Ω–∏–µ]\n–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ /settings –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é")

async def update_setting(update, param, value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É."""
    global BOT_TOKEN, MAIN_NAME, THEMES, HELLO_MESSAGES
    
    config = load_config()
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    if param == "bot_token":
        BOT_TOKEN = value
        config["bot_token"] = value
        await update.message.reply_text(f"‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω\n‚ö†Ô∏è –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    elif param == "main_name":
        MAIN_NAME = value
        config["main_name"] = value
        await update.message.reply_text(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Ç–µ–º—ã –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {MAIN_NAME}")
    elif param.startswith("theme_") and param[6:].isdigit():
        index = int(param[6:]) - 1
        if 0 <= index < len(THEMES):
            THEMES[index] = value
            config["themes"] = THEMES
            await update.message.reply_text(f"‚úÖ –¢–µ–º–∞ #{index+1} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {value}")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–µ–º—ã. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã: 1-{len(THEMES)}")
    elif param.startswith("hello_") and param[6:].isdigit():
        index = int(param[6:]) - 1
        if 0 <= index < len(HELLO_MESSAGES):
            HELLO_MESSAGES[index] = value
            config["hello_messages"] = HELLO_MESSAGES
            await update.message.reply_text(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{index+1} –∏–∑–º–µ–Ω–µ–Ω–æ")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã: 1-{len(HELLO_MESSAGES)}")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {param}")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_config(config)

async def settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫–∏ –æ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "settings_token":
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É:\n"
            "/settings set bot_token YOUR_TOKEN_HERE"
        )
    elif data == "settings_main_name":
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Ç–µ–º—ã, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É:\n"
            "/settings set main_name –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
        )
    elif data == "settings_themes":
        themes_text = "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏:\n\n"
        themes_text += "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–º–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        themes_text += "/list_themes - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ–º—ã\n"
        themes_text += "/add [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É\n"
        themes_text += "/delete [–Ω–æ–º–µ—Ä] - —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É\n"
        themes_text += "/edit_theme [–Ω–æ–º–µ—Ä] [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n"
        themes_text += f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º: {len(THEMES)}"
        await query.message.reply_text(themes_text)
    elif data == "settings_hello":
        hello_text = "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:\n\n"
        hello_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        hello_text += "/edit_hello [–Ω–æ–º–µ—Ä] [—Ç–µ–∫—Å—Ç] - –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        hello_text += "/list_themes - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        hello_text += f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(HELLO_MESSAGES)}"
        await query.message.reply_text(hello_text)
    else:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞."""
    message = (
        "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
        f"‚Ä¢ –ë–æ—Ç Telegram: –∞–∫—Ç–∏–≤–µ–Ω\n"
        f"‚Ä¢ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Ç–µ–º—ã: {MAIN_NAME}\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º: {len(THEMES)}\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(HELLO_MESSAGES)}\n"
        f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –≤–∫–ª—é—á–µ–Ω–æ\n"
        f"‚Ä¢ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {DATA_DIR}\n"
    )
    
    await update.message.reply_text(message)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    chat_id = str(update.effective_chat.id)
    
    if chat_id not in USER_STATS or not USER_STATS[chat_id]:
        await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
        return
    
    message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    user_stats_list = []
    for user_id, stats in USER_STATS[chat_id].items():
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            chat_member = await context.bot.get_chat_member(update.effective_chat.id, int(user_id))
            user_name = chat_member.user.full_name
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
            user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
        
        total_messages = sum(stats.values())
        user_stats_list.append((user_name, total_messages, stats))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
    user_stats_list.sort(key=lambda x: x[1], reverse=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    for i, (user_name, total, stats) in enumerate(user_stats_list[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10
        message += f"{i}. {user_name}: {total} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        message += f"   üìù –¢–µ–∫—Å—Ç: {stats.get('text', 0)}, üñº –§–æ—Ç–æ: {stats.get('photo', 0)}, "
        message += f"üéû –í–∏–¥–µ–æ: {stats.get('video', 0)}, üé≠ –°—Ç–∏–∫–µ—Ä—ã: {stats.get('sticker', 0)}, "
        message += f"üìä GIF: {stats.get('animation', 0)}\n"
    
    if len(user_stats_list) > 10:
        message += f"\n...–∏ –µ—â–µ {len(user_stats_list) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    await update.message.reply_text(message)

async def create_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ
    if update.effective_chat.type not in ['group', 'supergroup']:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    if not THEMES:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–º—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add")
        return
        
    status_message = await update.message.reply_text("–°–æ–∑–¥–∞—é —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è...")
    
    try:
        chat = await safe_api_call(context.bot.get_chat, 3, 2, update.effective_chat.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä—É–ø–ø–∞ —Ñ–æ—Ä—É–º–æ–º
        if not chat.is_forum:
            await safe_api_call(
                context.bot.edit_message_text,
                3, 2,
                chat_id=update.effective_chat.id,
                message_id=status_message.message_id,
                text="‚ö†Ô∏è –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º. –í–∫–ª—é—á–∏—Ç–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≥—Ä—É–ø–ø—ã."
            )
            return
            
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å General (ID=1)
        try:
            await safe_api_call(
                context.bot.edit_forum_topic,
                3, 2,
                chat_id=update.effective_chat.id,
                message_thread_id=1,
                name=MAIN_NAME
            )
            await safe_api_call(
                context.bot.send_message,
                3, 2,
                chat_id=update.effective_chat.id,
                text=f"‚úÖ –¢–µ–º–∞ 'General' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{MAIN_NAME}'"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ General: {e}")
            await safe_api_call(
                context.bot.send_message,
                3, 2,
                chat_id=update.effective_chat.id,
                text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ç–µ–º—É 'General'. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await safe_api_call(
            context.bot.edit_message_text,
            3, 2,
            chat_id=update.effective_chat.id,
            message_id=status_message.message_id,
            text="–°–æ–∑–¥–∞—é —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è... (0/{})".format(len(THEMES))
        )
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–µ–º—ã
        successful_topics = 0
        for i, theme_name in enumerate(THEMES, 1):
            try:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É —Å –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –≤—ã–∑–æ–≤–æ–º API
                new_topic = await safe_api_call(
                    context.bot.create_forum_topic,
                    3, 3,
                    chat_id=update.effective_chat.id,
                    name=theme_name
                )
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω–¥–µ–∫—Å–∞ —Ç–µ–º—ã
                hello_message = HELLO_MESSAGES[i-1] if i <= len(HELLO_MESSAGES) else f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–º—É '{theme_name}'"
                
                # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–º—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                topic_id = new_topic.message_thread_id
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É
                await asyncio.sleep(1)
                sent_message = await safe_api_call(
                    context.bot.send_message,
                    3, 2,
                    chat_id=update.effective_chat.id,
                    message_thread_id=topic_id,
                    text=hello_message
                )
                
                # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await asyncio.sleep(1)
                await safe_api_call(
                    context.bot.pin_chat_message,
                    3, 2,
                    chat_id=update.effective_chat.id,
                    message_id=sent_message.message_id,
                    disable_notification=True
                )
                
                successful_topics += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                await safe_api_call(
                    context.bot.edit_message_text,
                    3, 2,
                    chat_id=update.effective_chat.id,
                    message_id=status_message.message_id,
                    text=f"–°–æ–∑–¥–∞—é —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è... ({successful_topics}/{len(THEMES)})"
                )
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–µ–º
                await asyncio.sleep(3)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã {theme_name}: {e}")
                await safe_api_call(
                    context.bot.send_message,
                    3, 2,
                    chat_id=update.effective_chat.id,
                    text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã {theme_name}: {e}"
                )
                await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await safe_api_call(
            context.bot.edit_message_text,
            3, 2,
            chat_id=update.effective_chat.id,
            message_id=status_message.message_id,
            text=f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {successful_topics}/{len(THEMES)}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {e}")
        await safe_api_call(
            context.bot.edit_message_text,
            3, 2,
            chat_id=update.effective_chat.id,
            message_id=status_message.message_id,
            text=f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
        )

async def handle_new_chat_members(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–æ—Ç —Å—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    new_members = update.message.new_chat_members
    bot_user = await context.bot.get_me()
    
    if not any(member.id == bot_user.id for member in new_members):
        return
        
    # –ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É
    logger.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É: {update.effective_chat.title}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
    for i, message in enumerate(TEMPLATE_MESSAGES):
        try:
            await safe_api_call(
                context.bot.send_message,
                3, 2,
                chat_id=update.effective_chat.id,
                text=message
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if i < len(TEMPLATE_MESSAGES) - 1:
                await asyncio.sleep(1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä—É–ø–ø–∞ —Ñ–æ—Ä—É–º–æ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—ã
    try:
        await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        chat = await safe_api_call(context.bot.get_chat, 3, 2, update.effective_chat.id)
        
        if chat.is_forum:
            await safe_api_call(
                context.bot.send_message,
                3, 2,
                chat_id=update.effective_chat.id,
                text="–≠—Ç–æ –≥—Ä—É–ø–ø–∞ —Å —Ç–µ–º–∞–º–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º –ø–æ —à–∞–±–ª–æ–Ω—É."
            )
        else:
            await safe_api_call(
                context.bot.send_message,
                3, 2,
                chat_id=update.effective_chat.id,
                text="‚ö†Ô∏è –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è, —ç—Ç–∞ –≥—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∏–ø–∞ –≥—Ä—É–ø–ø—ã: {e}")

async def handle_new_user_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
    if not update.message.new_chat_members:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ, —á—Ç–æ–±—ã –µ–≥–æ –∏—Å–∫–ª—é—á–∏—Ç—å
    bot_user = await context.bot.get_me()
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∫—Ä–æ–º–µ –±–æ—Ç–∞)
    for new_member in update.message.new_chat_members:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        if new_member.id == bot_user.id:
            continue
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤
        if new_member.is_bot:
            continue
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if new_member.username:
            username = f"@{new_member.username}"
        else:
            username = new_member.full_name or "–¥—Ä—É–≥"
        
        welcome_message = f"–ü—Ä–∏–≤–µ—Ç {username} –≤ –≥—Ä—É–ø–ø–µ, —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Å–µ–±—è –∏ —á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è! üëã"
        
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=welcome_message
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É: {username} –≤ –≥—Ä—É–ø–ø–µ {update.effective_chat.title}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è–º–∏, –µ—Å–ª–∏ –º–Ω–æ–≥–æ –ª—é–¥–µ–π
            await asyncio.sleep(0.5)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    if not update.effective_user or update.effective_user.is_bot:
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
    
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if update.message.text:
        update_user_stats(chat_id, user_id, "text")
    
    if update.message.photo:
        update_user_stats(chat_id, user_id, "photo")
    
    if update.message.sticker:
        update_user_stats(chat_id, user_id, "sticker")
    
    if update.message.video:
        update_user_stats(chat_id, user_id, "video")
    
    if update.message.animation:  # GIFs
        update_user_stats(chat_id, user_id, "animation")
    
    if update.message.document:
        update_user_stats(chat_id, user_id, "document")
    
    if update.message.voice:
        update_user_stats(chat_id, user_id, "voice")
    
    if update.message.audio:
        update_user_stats(chat_id, user_id, "audio")

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = init_config()
    
    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
    global BOT_TOKEN
    if not BOT_TOKEN:
        print("‚ö†Ô∏è –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:")
        BOT_TOKEN = input().strip()
        config["bot_token"] = BOT_TOKEN
        save_config(config)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("create", create_command))
    application.add_handler(CommandHandler("settings", settings_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("stats", stats_command))
    
    # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏
    application.add_handler(CommandHandler("add", add_theme_command))
    application.add_handler(CommandHandler("delete", delete_theme_command))
    application.add_handler(CommandHandler("list_themes", list_themes_command))
    application.add_handler(CommandHandler("edit_theme", edit_theme_command))
    application.add_handler(CommandHandler("edit_hello", edit_hello_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    application.add_handler(CallbackQueryHandler(settings_callback))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
    application.add_handler(MessageHandler(filters.ChatType.GROUPS & filters.StatusUpdate.NEW_CHAT_MEMBERS, handle_new_user_welcome))
    application.add_handler(MessageHandler(filters.ChatType.GROUPS & filters.StatusUpdate.NEW_CHAT_MEMBERS, handle_new_chat_members))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print(f"üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {DATA_DIR}")
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º: {len(THEMES)}")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        save_user_stats()